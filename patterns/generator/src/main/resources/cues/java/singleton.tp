# start_pattern: EagerInit
# start_type: Singleton
# /**
# [[ClassComment]]
#  */
# [[typedef]] {
#
#     [[fields]]
#
#     protected [[InstName]]() {}
#
#     [[methods]]
# }
# end_type: Singleton
#
# start_type: ConcreteSingleton
# /**
# [[ClassComment]]
#  */
# [[typedef]] {
#
#     start_field: uniqueInstance
#     private static final [[Singleton.name]] [[uniqueInstance.name]] = new [[InstName]]();
#     end_field: uniqueInstance
#
#     [[fields]]
#
#     private [[InstName]]() {
#         super();
#     }
#
#     start_method: GetInstance
#     public static [[Singleton.name]] [[name]]() {
#         return [[uniqueInstance.name]];
#     }
#     end_method: GetInstance
#
#     [[methods]]
# }
# end_type: ConcreteSingleton
# end_pattern: EagerInit

start_pattern: LazyInit
start_type: Singleton
/**
[[ClassComment]]
 */
[[typedef]] {

    [[fields]]

    protected [[InstName]]() {}

    [[methods]]
}
end_type: Singleton

start_type: ConcreteSingleton
/**
[[ClassComment]]
 */
[[typedef]] {

    start_field: uniqueInstance
    private static [[Singleton.name]] [[uniqueInstance.name]];
    end_field: uniqueInstance
    [[fields]]

    private [[InstName]]() {
        super();
    }

    start_method: GetInstance
    public static [[Singleton.name]] [[name]]() {
        if ([[uniqueInstance.name]] == null)
            [[uniqueInstance.name]] = new [[InstName]]();
        return [[uniqueInstance.name]];
    }
    end_method: GetInstance

    [[methods]]
}
end_type: ConcreteSingleton
end_pattern: LazyInit

# start_pattern: DoubleCheckLock
# start_type: Singleton
# /**
# [[ClassComment]]
#  */
# [[typedef]] {
#
#     [[fields]]
#
#     protected [[InstName]]() {}
#
#     [[methods]]
# }
# end_type: Singleton
#
# start_type: ConcreteSingleton
# /**
# [[ClassComment]]
#  */
# [[typedef]] {
#
#     start_field: uniqueInstance
#     private static volatile [[Singleton.name]] [[uniqueInstance.name]];
#     end_field: uniqueInstance
#
#     [[fields]]
#
#     private [[InstName]]() {
#         super();
#     }
#
#     start_method: GetInstance
#     public static [[Singleton.name]] [[name]]() {
#         if ([[uniqueInstance.name]] == null) {
#             synchronized ([[InstName]].class) {
#                 if ([[uniqueInstance.name]] == null) {
#                     [[uniqueInstance.name]] = new [[InstName]]();
#                 }
#             }
#         }
#         return [[uniqueInstance.name]];
#     }
#     end_method: GetInstance
#
#     [[methods]]
# }
# end_type: ConcreteSingleton
# end_pattern: DoubleCheckLock