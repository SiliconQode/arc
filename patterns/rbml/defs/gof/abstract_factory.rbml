// Abstract Factory Pattern
pattern "Abstract Factory", {
  sps {
    roles {
      gen_hierarchy {
        classifier_role "Factory", root: true, {
          behavioral_feature "CreateProduct() : Product", mult: "1..*"
        }
        class_role "ConcreteFactory", mult: "1..*"
        classifier_role "AbstractFactory"
      }

      class_role "Client", mult: "1..1"

      gen_hierarchy {
        classifier_role "Product"
        classifier_role "AbstractProduct"
        class_role "ConcreteProduct", mult: "1..*"
      }
    }
    relations {
      association_role "ClientFactory", {
        source "Fact", role: "AbstractFactory", mult: "1..1"
        dest "Cln", role: "Client", mult: "1..*"
      }
      usage_role "ClientFactoryDep", source: "AbstractFactory", dest: "Client"
      usage_role "ConcreteDep", source "ConcreteFactory", dest "ConreteProduct"
      association_role "ClientProduct", {
        source "Prod", role: "Product", mult: "1..1"
        dest "Clnt", role: "Client", mult: "1..*"
      }
      at_least_one {
        generalization_role "ProductGeneralization", child: "Product", parent: "Product"
        realization_role "ProductRealization", child: "Product", parent: "Product"
      }
      at_least_one {
        generalization_role "FactoryGeneralization", child: "Factory", parent: "Factory"
        realization_role "FactoryRealization", child: "Factory", parent: "Factory"
      }
    }
    constraints {
    }
  }

  ips {
    roles {
    }

    trace {
    }
  }
}
