/*
 * MIT License
 *
 * Copyright (c) 2018-2019, Idaho State University, Empirical Software Engineering
 * Laboratory and Isaac Griffith
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

group = "dev.siliconcode.arc.parsers"
version = "1.0-SNAPSHOT"

plugins {
    kotlin("jvm") version "1.3.60"
    antlr
    id("kotlinx-serialization") version "1.3.11"
    id("com.github.hierynomus.license") version "0.15.0"
    id("org.jetbrains.dokka") version "0.9.18"
    id("application")
}

apply(plugin = "org.jetbrains.dokka")

repositories {
    jcenter()
    mavenCentral()
    maven { setUrl("https://kotlin.bintray.com/kotlinx") } // for kotlinx serialization runtime
}

dependencies {
    //    compile("org.slf4j:slf4j-nop:1.7.21")
    compile(kotlin("stdlib-jdk8"))
    compile(kotlin("reflect"))
    antlr("org.antlr:antlr4:4.7.2")
    compile("org.jgrapht:jgrapht-core:1.3.0")
    compile("org.jgrapht:jgrapht-io:1.3.0")
    compile("org.jgrapht:jgrapht-ext:1.3.0")
    compile("org.tinyjee.jgraphx:jgraphx:3.4.1.3")
    compile("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1")
    compile("com.google.guava:guava:27.1-jre")
    compile("io.github.microutils:kotlin-logging:1.6.26")
    compile("org.apache.commons:commons-text:1.7")
    compile("com.github.ajalt:clikt:2.1.0")
    compile("de.mpicbg.scicomp:krangl:0.11")
    compile("org.koin:koin-core:2.0.1")
    compile("org.koin:koin-logger-slf4j:2.0.1")

//    implementation("org.slf4j:slf4j-simple:1.7.26")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.0")


    testImplementation("io.kotlintest:kotlintest-runner-junit5:3.3.0")
    testImplementation("io.mockk:mockk:1.9.3")
}

buildscript {
    dependencies {
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:0.9.17")
    }
}

tasks {
    "compileKotlin" {
        dependsOn("generateGrammarSource")
    }

    "generateGrammarSource"(AntlrTask::class) {
        outputDirectory = file("build/generated-src/antlr/main/edu/isu/arcmlp/generated/grammar")
        arguments = arguments + listOf(
                "-visitor",
                "-package", "edu.isu.arcmlp.generated.grammar"
        )
    }

    "test"(Test::class) {
        useJUnitPlatform()
    }

    withType(KotlinJvmCompile::class) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

license {
    val files = listOf("ANTLRv4Lexer.g4", "ANTLRv4Parser.g4", "BNF.g4", "LexBasic.g4", "LexerAdaptor", "log4j2.xml")
    excludes(files)
    exclude("**/generated/**")

    mapping("g4", "JAVADOC_STYLE")
}

application {
    mainClassName = "edu.isu.arcmlp.cli.MainKt"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
